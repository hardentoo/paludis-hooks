#!/bin/bash
#
# Helper functions to use from /etc/paludis/bashrc and
# package environment control files.
#
# Copyright 2014-2017 by Alex Turbov <i.zaufi@gmail.com>
#

source ${PALUDIS_EBUILD_DIR}/echo_functions.bash

# Do nothing on sync or fetch action.
#
# NOTE When `WORKDIR` is defined -- we are ready to really build the package!
# (i.e. fetch has completed)
#
if [[ ${PALUDIS_ACTION} != sync && -n ${WORKDIR} ]]; then
    # Bring flag-o-matic.eclass into the scope, so env files may use functions from it to manupulate compiler/linker flags
    inherit flag-o-matic
fi


#
# Get current GCC version
#
phenv-get-gcc-version()
{
    local gcc_bin="${CC:-gcc}"
    set -- $("${gcc_bin}" -E -P - <<<"__GNUC__ __GNUC_MINOR__ __GNUC_PATCHLEVEL__")
    echo $1.$2.$3
}

#
# Get a number of CPUs available
#
phenv-get-cpu-available()
{
    nproc
}

#BEGIN Helper functions named after toolchain-funcs.eclass
#
# Helper function to build a full path to requested GCC utility
# based on current GCC (found in `PATH`) or `CC` environment variable.
#
# $1 -- program name
#
_phenv-getPROG()
{
    local prog="${1}"
    echo /usr/${CHOST}/gcc-bin/$(phenv-get-gcc-version)/gcc-${prog}
}
#
# Get a full path to GCC's `ar` wrapper
#
phenv-getAR()
{
    _phenv-getPROG ar
}
#
# Get a full path to GCC's `nm` wrapper
#
phenv-getNM()
{
    _phenv-getPROG nm
}
#
# Get a full path to GCC's `ranlib` wrapper
#
phenv-getRANLIB()
{
    _phenv-getPROG ranlib
}
#END Helper functions named after toolchain-funcs.eclass

#
# Add options to the end of a given var
# $1 - variable to modify
# $2..$n - options to add
#
phenv-append-var()
{
    local var=$1
    shift
    local stmt="$var=\"\$${var} $*\""
    eval "$stmt"
}

#
# Remove options from a given var
# $1 - variable to modify
# $2..$n - options to remove
#
phenv-filter-var()
{
    local -r _ro_var="$1"
    shift
    local -a _ro_new_value
    local _ro_opt
    local _ro_del_value

    # Iterate over options in a variable
    for _ro_opt in ${!_ro_var}; do
        # Iterate over options to remove passed as function parameters
        for _ro_del_value in "$@"; do
            [[ ${_ro_opt} == ${_ro_del_value} ]] && continue 2
        done
        _ro_new_value+=( "${_ro_opt}" )
    done
    eval "${_ro_var}=\"${_ro_new_value[@]}\""
}

#
# The main function to be used from ${PALUDIS_CONFIG_DIR}/bashrc
#
setup_pkg_env()
{
    [[ ! -f ${PALUDIS_CONFIG_DIR}/package_env.conf || ${EBUILD_PHASE} = initmisc ]] && return
    # Select configured environments
    # NOTE It is important to apply them in the same order! (even duplicates)
    local envs=$(for i in $(egrep "^${CATEGORY}/(${PN}|\*)(:[^\s]+)?\s" ${PALUDIS_CONFIG_DIR}/package_env.conf | sed 's,[^ ]\+\s,,'); do echo "${i}"; done)
    for conf in $envs; do
        if [[ -f ${PALUDIS_CONFIG_DIR}/env.conf.d/${conf}.conf ]]; then
            source ${PALUDIS_CONFIG_DIR}/env.conf.d/${conf}.conf
        fi
        # NOTE Silently ignore undefined environment.
        # To avoid any output from bashrc, as supposed by [docs](http://paludis.exherbo.org/configuration/bashrc.html)
    done
}

# Do nothing on sync or fetch action.
#
# NOTE When `WORKDIR` is defined -- we are ready to really build the package!
# (i.e. fetch has completed)
#
# TODO What other actions possible?
#
# TODO Make sure the rest will run only on real build of some package.
#
[[ ${PALUDIS_ACTION} != sync && -n ${WORKDIR} ]] && setup_pkg_env

# kate: hl bash;
